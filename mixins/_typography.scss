// ####################################################
// Font setup mixins
//
//  see setup/_typography.scss

// outputs CSS attributes
@mixin typeAttribute($font-info) {
  @each $attribute, $setting in $font-info {
    @if $attribute == 'font-size' {
      @if (
        (type-of($setting) == 'number' and unit($setting) == 'vw') or
        type-of($setting) == 'string'
      ) {
        font-size: $setting;
      } @else {
        font-size: rem-calc($setting);
      }
    } @else if $attribute == 'bold-weight' {
      --bold-weight: #{$setting};
    } @else if $attribute == 'font-smoothing' {
      @include font-smoothing(if($setting==true,'on','off'));
    } @else if type-of($setting) == 'string' {
      #{$attribute}: unquote($setting);
    } @else {
      #{$attribute}: #{$setting};
    }
  }
}

// loops a typeset to generate styles objects
// and then generates CSS as required
@mixin typeStyle($settings) {
  // set the various font info per breakpoint
  @if $settings {
    $_settingsCache: ();
    // loop the breakpoints in the setttings
    @each $breakpoint, $font-info in $settings {
      // check this is a valid breakpoint
      @if map-has-key($a17-breakpoints-with-directions, $breakpoint) {
        $_settings: ();
        // get font info for this breakpoint
        // conditionally so can be inherited from smaller screens
        @each $attribute, $setting in $font-info {
          $cachedSetting: map-get($_settingsCache, $attribute);
          @if not $cachedSetting or $cachedSetting != $setting {
            $_settingsCache: map-merge($_settingsCache, (
              $attribute: $setting)
            );
            $_settings: map-merge($_settings, (
              $attribute: $setting)
            );
          }
        }
        // check if this is the smallest breakpoint (the default font setting)
        @if (index(map-keys($settings), $breakpoint) == 1) {
          @include typeAttribute($_settings);
          b,
          strong {
            font-weight: var(--bold-weight);
          }
          i,
          em {
            font-style: italic;
          }
        } @else {
          @include breakpoint("#{$breakpoint}+") {
            @include typeAttribute($_settings);
          }
        }
      }
    }
  }
}

/* outputs a specified typeset */
@mixin typeset($name) {
  @if $name {
    /* check if user specified a `f-xxx` type name and fix */
    $index: str-index($name, 'f-');
    @if $index == 1 {
      $name: str-slice($name, 3, str-length($name));
    }
    /* now look for the specified typeset */
    @if variable-exists(typography) and map-has-key($typography, 'typesets') {
      $settings: map-deep-get($typography, 'typesets', $name);
      @if $settings {
        /* output specified typeset */
        @include typeStyle($settings);
      } @else {
        @debug 'No typeset named #{$name}';
      }
    } @else {
      @debug '$typography map not found';
    }
  } @else {
    @debug 'No type set specified';
  }
}

// loops typesets,
// makes placeholder and class for each
// populates with styles
@mixin typeStyles($sets) {
  @each $name, $settings in $sets {
    %f-#{$name} {
      @include typeStyle($settings);
    }

    @if map-get($_a17-scss-generate-classes, 'typography') == true {
      .f-#{$name} {
        @include typeStyle($settings);
      }
    }
  }
}

@mixin processTypography() {
  $families: ();
  $faces: ();
  $typesets: ();

  @if variable-exists(typography) {
    $families: map-merge($families, map-deep-get($typography, 'families'));

    @if type-of(nth(map-deep-get($typography, 'faces'), 1)) == 'list' {
      // single faces confuse things..
      // the face object stops being wrapped in a list
      $f: (
        "json1": map-deep-get($typography, 'faces')
      );
      $faces: map-merge($faces, $f);
    } @else {
      @for $i from 1 through length(map-deep-get($typography, 'faces')) {
        $face: nth(map-deep-get($typography, 'faces'), $i);
        $f: (
          "json#{$i}": $face
        );
        $faces: map-merge($faces, $f);
      }
    }

    $typesets: map-merge($typesets, map-deep-get($typography, 'typesets'));
  }

  :root {
    @each $key, $value in $families {
      --#{$key}: #{$value};
    }
  }

  @include typeStyles($typesets);
}

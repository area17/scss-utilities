@mixin setupSpacing() {

  $_positive: (
    mt: (margin-top),
    mb: (margin-bottom),
    ml: (margin-left),
    mr: (margin-right),
    m: (margin),
    mx: (margin-right, margin-left),
    my: (margin-top, margin-bottom),
    pt: (padding-top),
    pb: (padding-bottom),
    pl: (padding-left),
    pr: (padding-right),
    p: (padding),
    px: (padding-right, padding-left),
    py: (padding-top, padding-bottom),
    top: (top),
    bottom: (bottom),
    left: (left),
    right: (right),
    inset: (inset),
    inset-x: (inset-x),
    inset-y: (inset-y),
    gap: (gap),
    gap-x: (column-gap),
    gap-y: (row-gap),
  );

  $_negative: (
    mt: (margin-top),
    mb: (margin-bottom),
    ml: (margin-left),
    mr: (margin-right),
    m: (margin),
    mx: (margin-right, margin-left),
    my: (margin-top, margin-bottom),
    top: (top),
    bottom: (bottom),
    left: (left),
    right: (right),
    inset: (inset),
    inset-x: (inset-x),
    inset-y: (inset-y),
  );

  $_gutters: (
    gutter: var(--inner-gutter),
    outer-gutter: var(--outer-gutter)
  );

  $_spacing: ();

  @if variable-exists(spacing) {
    $_spacing: map-merge($_spacing, $spacing);
  }

  $_e_spacing: ();

  // create empty sets
  @each $name, $point in $a17-breakpoints {
    $_e_spacing: map-merge($_e_spacing, (#{$name}: 'null'));
  }

  @each $name, $set in $_spacing {
    $newset: $_e_spacing;

    // check for units, convert to rems
    @each $bp, $size in $set {
      @if (unitless($size)) {
        $size: $size * 1px;
      }
      @if (unit($size) != 'vw' and unit($size) != 'rem') {
        $size: #{rem-calc($size)};
      }
      $set: map-merge($set, (#{$bp}: #{$size}));
    }

    $set: map-merge($newset, $set);

    $previous-value: 'auto';
    @each $bp, $size in $set {
      @if ($size == 'null') {
        $set: map-merge($set, (#{$bp}: #{$previous-value}));
      } @else {
        $previous-value: $size;
      }
    }

    $_spacing: map-merge($_spacing, (#{$name}: $set));

    /* generate responsive spacing placeholders and classes */
    @each $class, $attrs in $_positive {
      %#{$class}-#{$name},
      .#{$class}-#{$name} {
        @each $attr in $attrs {
          #{$attr}: var(--spacing-#{$name});
        }
      }
    }

    @each $class, $attrs in $_negative {
      %-#{$class}-#{$name},
      .-#{$class}-#{$name} {
        @each $attr in $attrs {
          #{$attr}: calc(var(--spacing-#{$name}) * -1);
        }
      }
    }
  }

  /* generate responsive spacing root variables */
  @each $bpname, $point in $a17-breakpoints {
    @if ($bpname == $a17-smallest-breakpoint-name) {
      :root {
        --SPACING_VARs: 'at this breakpoint ↓';
        @each $name, $set in $_spacing {
          --spacing-#{$name}: #{map-get($set, $bpname)};
        }
      }
    } @else {
      @include breakpoint('#{$bpname}+') {
        :root {
          --SPACING_VARs: 'at this breakpoint ↓';
          @each $name, $set in $_spacing {
            --spacing-#{$name}: #{map-get($set, $bpname)};
          }
        }
      }
    }
  }

  /* generate gutter placeholders and classes */
  @each $gutter, $cssVariable in $_gutters {
    @each $class, $attrs in $_positive {
      %#{$class}-#{$gutter},
      .#{$class}-#{$gutter} {
        @each $attr in $attrs {
          #{$attr}: $cssVariable;
        }
      }
    }

    @each $class, $attrs in $_negative {
      %-#{$class}-#{$gutter},
      .-#{$class}-#{$gutter} {
        @each $attr in $attrs {
          #{$attr}: calc(#{$cssVariable} * -1);
        }
      }
    }
  }
}
